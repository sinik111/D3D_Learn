1. Skybox 의미
	- 플레이어가 회전하거나 이동하더라도 고정되어있어서 배경처럼 보임.
	- 배경이기 때문에 모든 오브젝트보다 멀리 그려져야함.

2. Skybox 구현 방법
	- 카메라가 이동, 회전하더라도 Skybox는 고정되어 있어야 함.
	  위치는 카메라를 따라가고 회전의 영향을 받지 않게 하기 위해 카메라의 Position만 가지고 월드 행렬을 만들어줌.

	- Skybox가 카메라의 모든 방향을 둘러싸기 위해 카메라가 Skybox 내부에 위치함.
	  카메라가 Skybox 내부에서 안쪽 면을 봐야함.
	  안쪽에서 삼각형 면을 보면 인덱스 순서가 뒤집혀있기 때문에 뒷면 Culling 됨.
	   Rasterizer의 기본 앞면 인덱스 순서인 시계 방향을 반시계 방향으로 바꿔줌.

	  // Rasterizer state 생성

	  D3D11_RASTERIZER_DESC rasterizerDesc{};
	  rasterizerDesc.CullMode = D3D11_CULL_BACK;   // 뒷면을 그리지 않음
	  rasterizerDesc.FillMode = D3D11_FILL_SOLID;  // 폴리곤 채움
	  rasterizerDesc.DepthClipEnable = true;       // 깊이 잘라내기 활성화
	  rasterizerDesc.FrontCounterClockwise = true; // 반시계 방향이 앞면

	  device->CreateRasterizerState(&rasterizerDesc, &m_rasterizerState);

	  ...

	  // Skybox 그리기 전
	  deviceContext->RSSetState(m_rasterizerState.Get());

	  ...

	  // Skybox 그린 후
	   deviceContext->RSSetState(nullptr);

	  다른 오브젝트들은 여전히 시계 방향으로 그려져야하기 때문에 Skybox를 그린 후에 다시 적용 해제시켜줌.

	- 배경이기 때문에 모든 오브젝트보다 멀리 그려져야함.
	  픽셀이 그려질지 말지는 출력 병합기 단계(Output Merger Stage)에서 Depth test로 결정됨.
	  Skybox가 다른 오브젝트에 가려서 그려지지 않게 하려면 Depth가 가장 커야함.
	   카메라를 감싸고 있는 작은 큐브이기 때문에 깊이값을 직접 변경해줘야함.

	  output.pos = mul(float4(input.pos, 1.0f), world);
	  output.pos = mul(output.pos, view);
	  output.pos = mul(output.pos, projection).xyww;

	  NDC 좌표계에서 x, y, z 를 w로 나눌 때 z'가 가장 큰 값인 1이 될 수 있게 z를 w로 바꿔 넣어줌.
	  
	  // DepthStencil State 생성

	  D3D11_DEPTH_STENCIL_DESC depthStencilDesc{};
	  depthStencilDesc.DepthEnable = true; // Depth test를 함.
	  depthStencilDesc.DepthWriteMask = D3D11_DEPTH_WRITE_MASK_ZERO; // 깊이 값 기록안함

	  // 근데 이거는 D3D11_DEPTH_WRITE_MASK_ALL으로 해도 괜찮은 거 같은데 잘 모르겠음.
	   //  Depth buffer를 1.0f Clear 해주고 Skybox의 깊이 값도 1.0f 라서 기록 하든 안하든 같은 거 같은데.

	  depthStencilDesc.DepthFunc = D3D11_COMPARISON_LESS_EQUAL; // 새로운 픽셀의 깊이가 같거나 작으면 통과

	   // 예를 들면 기존에 그려져있는 오브젝트의 깊이 값이 0.5f일때 Skybox의 깊이 값은 1.0f라서 안그려짐.
	  // EQUAL을 하는 이유는 Depth가 전부 가장 큰 1.0f로 초기화 되어있기 때문에 EQUAL을 주지 않으면 통과가 안되어서 안그려짐.

	  device->CreateDepthStencilState(&depthStencilDesc, &m_depthStencilState);

	  ...
	  
	  // Skybox 그리기 전
	  deviceContext->OMSetDepthStencilState(m_depthStencilState.Get(), 0);

	  ...

	  // Skybox 그린 후
	  deviceContext->OMSetDepthStencilState(nullptr, 0); // 적용 해제 시켜줌.


	- TextureCube 적용시키기
	  
	  TextureCube texCubeDiffuse : register(t1);
	  
	  // vertex shader
	  output.originPos = input.pos;

	  // pixel shader
	  return texCubeDiffuse.Sample(samLinear, input.originPos);





























		